%!PS-Adobe-3.0 EPSF-3.0
%%Title: (PCunrot1.pdf)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 16:47:51 08/18/09
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 240 154
%%HiResBoundingBox: 0.0 0.0 240.0 153.812
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Times-Bold
[ 0 /space/dotlessi/caron/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quotesingle/parenleft/parenright
/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five
/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A
/B/C/D/E/F/G
/H/I/J/K/L/M
/N/O/P/Q/R/S
/T/U/V/W/X/Y
/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e
/f/g/h/i/j/k
/l/m/n/o/p/q
/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright
/asciitilde/bullet/Euro/bullet/quotesinglbase/florin
/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand
/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet
/endash/emdash/tilde/trademark/scaron/guilsinglright
/oe/bullet/zcaron/Ydieresis/space/exclamdown
/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen
/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring
/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis
/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde
/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde
/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
/N16 (Times-Bold) -1 TZ
%%IncludeResource Times-BoldItalic
[ 0 /space/dotlessi/caron/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quotesingle/parenleft/parenright
/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five
/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A
/B/C/D/E/F/G
/H/I/J/K/L/M
/N/O/P/Q/R/S
/T/U/V/W/X/Y
/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e
/f/g/h/i/j/k
/l/m/n/o/p/q
/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright
/asciitilde/bullet/Euro/bullet/quotesinglbase/florin
/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand
/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet
/endash/emdash/tilde/trademark/scaron/guilsinglright
/oe/bullet/zcaron/Ydieresis/space/exclamdown
/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen
/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring
/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis
/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde
/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde
/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
/N4 (Times-BoldItalic) -1 TZ
%%IncludeResource Helvetica-Bold
[ 0 /space/dotlessi/caron/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/space/space/space
/space/space/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quotesingle/parenleft/parenright
/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five
/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A
/B/C/D/E/F/G
/H/I/J/K/L/M
/N/O/P/Q/R/S
/T/U/V/W/X/Y
/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e
/f/g/h/i/j/k
/l/m/n/o/p/q
/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright
/asciitilde/bullet/Euro/bullet/quotesinglbase/florin
/quotedblbase/ellipsis/dagger/daggerdbl/circumflex/perthousand
/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
/bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet
/endash/emdash/tilde/trademark/scaron/guilsinglright
/oe/bullet/zcaron/Ydieresis/space/exclamdown
/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen
/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring
/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis
/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde
/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde
/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
/N5 (Helvetica-Bold) -1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3265 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2009-08-18T16:47:51-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-08-18T16:47:51-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-08-18T16:47:51-04:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:C3EAF554368CDE11832FCFF298A25501</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:C3EAF554368CDE11832FCFF298A25501</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default"/>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 240.0 153.812 rectclip
q
0.0 0.0 m
240.0 0.0 l
240.0 153.812 l
0.0 153.812 l
h
W
n
1.0 0.0 0.0 -1.0 0.0 153.812 cm
1.0 0.0 0.0 1.0 -36.0 -9.6 cm
2 J
n
36.0 9.6 m
36.0 163.412 l
276.0 163.412 l
276.0 9.6 l
eoclip
n
q
n
[/DeviceRGB] cs 0.85 0.85 0.85 sc
36.000000 9.600000 240.000000 153.811996 rectfill

Q
q
n
34.0 7.6 m
34.0 165.412 l
278.0 165.412 l
278.0 7.6 l
eoclip
n
q
1.0 0.0 0.0 1.0 36.0 87.412 cm
q
n
[/DeviceRGB] cs 1.0 1.0 1.0 sc
0.000000 -77.811996 240.000000 153.811996 rectfill

Q
Q
q
n
36.0 9.412 m
36.0 163.412 l
276.0 163.412 l
276.0 9.412 l
eoclip
n
3.239 M
q
n
36.0 25.412 m
36.0 163.412 l
260.0 163.412 l
260.0 25.412 l
eoclip
n
Q
q
n
36.0 25.412 m
36.0 163.412 l
260.0 163.412 l
260.0 25.412 l
eoclip
n
Q
q
n
36.0 25.412 m
36.0 163.412 l
260.0 163.412 l
260.0 25.412 l
eoclip
n
0.4 w
3.25 M
n
156.286 119.245 m
156.285 119.245 l
156.284 119.244 l
156.281 119.243 l
156.275 119.24 l
156.264 119.236 l
156.242 119.226 l
156.197 119.207 l
156.101 119.166 l
156.011 119.127 l
155.923 119.089 l
155.827 119.048 l
155.738 119.01 l
155.641 118.969 l
155.547 118.928 l
155.458 118.891 l
155.363 118.85 l
155.273 118.811 l
155.186 118.774 l
155.091 118.733 l
155.003 118.696 l
154.907 118.655 l
154.813 118.615 l
154.726 118.577 l
154.631 118.537 l
154.542 118.499 l
154.446 118.458 l
154.352 118.418 l
154.265 118.38 l
154.17 118.34 l
154.081 118.302 l
153.995 118.265 l
153.901 118.225 l
153.813 118.187 l
153.718 118.147 l
153.625 118.107 l
153.538 118.07 l
153.444 118.03 l
153.356 117.993 l
153.27 117.956 l
153.177 117.916 l
153.09 117.879 l
152.996 117.839 l
152.908 117.801 l
152.822 117.765 l
152.728 117.725 l
152.641 117.688 l
152.547 117.648 l
152.455 117.609 l
152.368 117.572 l
152.275 117.532 l
152.188 117.495 l
152.103 117.459 l
152.01 117.419 l
151.924 117.383 l
151.83 117.343 l
151.739 117.304 l
151.653 117.268 l
151.561 117.228 l
151.474 117.192 l
151.381 117.152 l
151.289 117.113 l
151.204 117.077 l
151.111 117.037 l
151.025 117.001 l
150.94 116.965 l
150.848 116.926 l
150.763 116.889 l
150.67 116.85 l
150.579 116.811 l
150.494 116.775 l
150.403 116.736 l
150.317 116.7 l
150.233 116.665 l
150.142 116.626 l
150.057 116.59 l
149.965 116.551 l
149.88 116.515 l
149.796 116.479 l
149.705 116.441 l
149.62 116.405 l
149.528 116.366 l
149.437 116.327 l
149.353 116.292 l
149.262 116.253 l
149.177 116.217 l
149.094 116.182 l
149.004 116.144 l
148.92 116.108 l
148.829 116.07 l
148.739 116.032 l
148.656 115.997 l
148.566 115.958 l
148.481 115.923 l
148.399 115.888 l
148.309 115.85 l
148.226 115.815 l
148.136 115.777 l
148.051 115.741 l
147.969 115.706 l
147.879 115.668 l
147.796 115.633 l
147.705 115.595 l
147.617 115.557 l
147.534 115.523 l
147.444 115.485 l
147.361 115.45 l
147.279 115.415 l
147.19 115.378 l
147.108 115.343 l
147.018 115.305 l
146.93 115.268 l
146.848 115.233 l
146.759 115.196 l
146.677 115.161 l
146.587 115.123 l
146.499 115.086 l
146.417 115.051 l
146.328 115.014 l
146.245 114.979 l
146.164 114.945 l
146.076 114.908 l
145.994 114.873 l
145.905 114.836 l
145.818 114.799 l
145.737 114.765 l
145.649 114.728 l
145.567 114.693 l
145.486 114.659 l
145.399 114.623 l
145.318 114.589 l
145.229 114.552 l
145.147 114.517 l
145.067 114.483 l
144.979 114.446 l
144.898 114.412 l
144.81 114.375 l
144.724 114.339 l
144.643 114.305 l
144.556 114.268 l
144.474 114.234 l
144.394 114.201 l
144.308 114.164 l
144.227 114.13 l
144.14 114.094 l
144.054 114.058 l
143.974 114.024 l
143.888 113.988 l
143.807 113.954 l
143.72 113.917 l
143.634 113.881 l
143.554 113.848 l
143.467 113.812 l
143.387 113.778 l
143.308 113.744 l
143.222 113.709 l
143.142 113.675 l
143.055 113.639 l
142.97 113.603 l
142.891 113.57 l
142.805 113.534 l
142.725 113.5 l
142.647 113.468 l
142.562 113.432 l
142.483 113.399 l
142.397 113.363 l
142.312 113.328 l
142.234 113.295 l
142.149 113.259 l
142.07 113.226 l
141.984 113.19 l
141.9 113.155 l
141.821 113.122 l
141.736 113.086 l
141.657 113.053 l
141.579 113.021 l
141.495 112.985 l
141.416 112.952 l
141.331 112.917 l
141.247 112.882 l
141.17 112.849 l
141.085 112.814 l
141.007 112.781 l
140.93 112.749 l
140.846 112.714 l
140.768 112.682 l
140.684 112.647 l
140.605 112.614 l
140.528 112.582 l
140.444 112.547 l
140.366 112.514 l
140.282 112.479 l
140.199 112.444 l
140.122 112.412 l
140.039 112.377 l
139.961 112.345 l
139.884 112.313 l
139.801 112.278 l
139.724 112.246 l
139.641 112.211 l
139.558 112.177 l
139.482 112.145 l
139.399 112.111 l
139.322 112.078 l
139.238 112.044 l
139.156 112.009 l
139.08 111.978 l
138.997 111.943 l
138.92 111.911 l
138.844 111.879 l
138.762 111.845 l
138.685 111.813 l
138.602 111.779 l
138.521 111.745 l
138.445 111.713 l
138.363 111.679 l
138.286 111.647 l
138.211 111.616 l
138.13 111.582 l
138.054 111.551 l
137.972 111.516 l
137.895 111.485 l
137.82 111.453 l
137.739 111.419 l
137.663 111.388 l
137.581 111.354 l
137.5 111.32 l
137.425 111.289 l
137.344 111.255 l
137.268 111.224 l
137.193 111.193 l
137.113 111.159 l
137.037 111.128 l
136.956 111.094 l
136.876 111.061 l
136.802 111.03 l
136.721 110.997 l
136.646 110.965 l
136.572 110.935 l
136.492 110.902 l
136.418 110.871 l
136.337 110.837 l
136.262 110.806 l
136.188 110.775 l
136.108 110.742 l
136.033 110.711 l
135.953 110.678 l
135.873 110.645 l
135.8 110.614 l
135.72 110.581 l
135.645 110.55 l
135.572 110.52 l
135.493 110.487 l
135.419 110.456 l
135.339 110.423 l
135.261 110.391 l
135.187 110.36 l
135.108 110.328 l
135.034 110.297 l
134.954 110.264 l
134.876 110.231 l
134.803 110.201 l
134.723 110.168 l
134.649 110.138 l
134.577 110.108 l
134.499 110.075 l
134.425 110.045 l
134.346 110.012 l
134.268 109.98 l
134.196 109.95 l
134.117 109.917 l
134.044 109.887 l
133.972 109.857 l
133.895 109.825 l
133.822 109.795 l
133.743 109.763 l
133.67 109.732 l
133.598 109.703 l
133.521 109.671 l
133.448 109.641 l
133.369 109.608 l
133.292 109.576 l
133.221 109.547 l
133.143 109.514 l
133.07 109.484 l
132.999 109.455 l
132.922 109.423 l
132.85 109.394 l
132.772 109.361 l
132.696 109.33 l
132.625 109.3 l
132.548 109.269 l
132.476 109.239 l
132.398 109.207 l
132.321 109.175 l
132.25 109.146 l
132.173 109.114 l
132.101 109.084 l
132.031 109.055 l
131.954 109.024 l
131.883 108.994 l
131.806 108.962 l
131.73 108.931 l
131.66 108.902 l
131.583 108.871 l
131.512 108.841 l
131.442 108.812 l
131.366 108.781 l
131.296 108.752 l
131.219 108.721 l
131.144 108.69 l
131.075 108.661 l
130.999 108.63 l
130.928 108.601 l
130.852 108.569 l
130.777 108.538 l
130.707 108.509 l
130.631 108.478 l
130.561 108.449 l
130.491 108.421 l
130.416 108.39 l
130.347 108.361 l
130.271 108.33 l
130.197 108.299 l
130.127 108.271 l
130.052 108.24 l
129.982 108.211 l
129.914 108.183 l
129.839 108.152 l
129.77 108.124 l
129.695 108.093 l
129.625 108.064 l
129.557 108.036 l
129.482 108.005 l
129.413 107.977 l
129.338 107.946 l
129.264 107.916 l
129.196 107.887 l
129.121 107.857 l
129.052 107.828 l
128.984 107.8 l
128.911 107.77 l
128.842 107.742 l
128.768 107.711 l
128.695 107.681 l
128.627 107.653 l
128.553 107.623 l
128.484 107.595 l
128.41 107.564 l
128.337 107.534 l
128.269 107.506 l
128.195 107.476 l
128.127 107.448 l
128.059 107.42 l
127.986 107.39 l
127.918 107.362 l
127.845 107.332 l
127.773 107.302 l
127.705 107.275 l
127.632 107.245 l
127.564 107.217 l
127.498 107.189 l
127.425 107.16 l
127.358 107.132 l
127.285 107.102 l
127.217 107.074 l
127.15 107.047 l
127.078 107.017 l
127.011 106.99 l
126.938 106.96 l
126.866 106.93 l
126.799 106.903 l
126.727 106.873 l
126.66 106.846 l
126.594 106.818 l
126.522 106.789 l
126.455 106.762 l
126.383 106.732 l
126.312 106.703 l
126.246 106.676 l
126.174 106.646 l
126.108 106.619 l
126.035 106.589 l
125.964 106.56 l
125.898 106.533 l
125.827 106.504 l
125.76 106.477 l
125.694 106.45 l
125.623 106.421 l
125.557 106.394 l
125.486 106.364 l
125.415 106.335 l
125.35 106.309 l
125.279 106.279 l
125.213 106.252 l
125.148 106.226 l
125.078 106.197 l
125.012 106.17 l
124.941 106.141 l
124.872 106.113 l
124.807 106.086 l
124.737 106.057 l
124.671 106.03 l
124.6 106.001 l
124.531 105.973 l
124.466 105.946 l
124.396 105.918 l
124.33 105.891 l
124.266 105.864 l
124.196 105.836 l
124.131 105.809 l
124.061 105.781 l
123.992 105.752 l
123.928 105.726 l
123.858 105.698 l
123.793 105.671 l
123.73 105.645 l
123.661 105.617 l
123.597 105.591 l
123.527 105.562 l
123.462 105.535 l
123.398 105.509 l
123.33 105.481 l
123.265 105.455 l
123.196 105.426 l
123.127 105.399 l
123.064 105.373 l
122.995 105.344 l
122.93 105.318 l
122.867 105.292 l
122.799 105.264 l
122.736 105.238 l
122.667 105.21 l
122.599 105.182 l
122.536 105.157 l
122.468 105.129 l
122.404 105.103 l
122.335 105.074 l
122.267 105.047 l
122.204 105.021 l
122.136 104.993 l
122.072 104.967 l
122.01 104.942 l
121.942 104.914 l
121.879 104.888 l
121.811 104.86 l
121.744 104.833 l
121.682 104.807 l
121.614 104.78 l
121.551 104.754 l
121.489 104.729 l
121.422 104.701 l
121.36 104.676 l
121.292 104.648 l
121.229 104.622 l
121.167 104.597 l
121.1 104.57 l
121.038 104.544 l
120.97 104.517 l
120.904 104.489 l
120.842 104.464 l
120.775 104.437 l
120.712 104.411 l
120.651 104.386 l
120.585 104.359 l
120.523 104.334 l
120.456 104.307 l
120.39 104.28 l
120.329 104.255 l
120.263 104.228 l
120.201 104.202 l
120.14 104.178 l
120.074 104.151 l
120.013 104.126 l
119.947 104.099 l
119.885 104.073 l
119.824 104.049 l
119.759 104.022 l
119.697 103.997 l
119.631 103.97 l
119.566 103.943 l
119.505 103.918 l
119.44 103.891 l
119.378 103.866 l
119.318 103.842 l
119.253 103.815 l
119.192 103.791 l
119.127 103.764 l
119.062 103.737 l
119.002 103.713 l
118.937 103.686 l
118.876 103.662 l
118.811 103.635 l
118.746 103.608 l
118.686 103.584 l
118.621 103.557 l
118.56 103.533 l
118.501 103.508 l
118.437 103.482 l
118.376 103.457 l
118.311 103.431 l
118.248 103.405 l
118.188 103.381 l
118.124 103.354 l
118.064 103.33 l
118.005 103.306 l
117.941 103.28 l
117.881 103.255 l
117.817 103.229 l
117.757 103.205 l
117.698 103.18 l
117.634 103.154 l
117.574 103.13 l
117.51 103.104 l
117.447 103.078 l
117.388 103.054 l
117.324 103.028 l
117.265 103.004 l
117.206 102.98 l
117.143 102.954 l
117.084 102.93 l
117.02 102.904 l
116.958 102.878 l
116.899 102.855 l
116.836 102.829 l
116.777 102.805 l
116.713 102.779 l
116.651 102.753 l
116.592 102.729 l
116.529 102.704 l
116.47 102.68 l
116.413 102.656 l
116.35 102.63 l
116.292 102.607 l
116.228 102.581 l
116.166 102.556 l
116.109 102.532 l
116.046 102.506 l
115.988 102.483 l
115.93 102.459 l
115.869 102.434 l
115.811 102.41 l
115.748 102.385 l
115.687 102.36 l
115.63 102.336 l
115.568 102.311 l
115.51 102.288 l
115.447 102.262 l
115.386 102.237 l
115.329 102.214 l
115.267 102.188 l
115.209 102.165 l
115.152 102.142 l
115.091 102.117 l
115.034 102.093 l
114.972 102.068 l
114.911 102.043 l
114.854 102.02 l
114.793 101.995 l
114.736 101.972 l
114.68 101.949 l
114.619 101.924 l
114.562 101.901 l
114.501 101.876 l
114.444 101.852 l
114.387 101.829 l
114.327 101.805 l
114.27 101.782 l
114.209 101.756 l
114.148 101.732 l
114.092 101.709 l
114.032 101.684 l
113.975 101.661 l
113.919 101.638 l
113.859 101.614 l
113.803 101.591 l
113.742 101.566 l
113.683 101.542 l
113.627 101.519 l
113.567 101.495 l
113.511 101.472 l
113.45 101.447 l
113.391 101.423 l
113.335 101.4 l
113.275 101.375 l
113.219 101.352 l
113.164 101.33 l
113.104 101.306 l
113.049 101.283 l
112.988 101.258 l
112.929 101.234 l
112.874 101.212 l
112.815 101.187 l
112.759 101.165 l
112.705 101.143 l
112.646 101.118 l
112.591 101.096 l
112.531 101.072 l
112.476 101.049 l
112.421 101.027 l
112.362 101.003 l
112.307 100.98 l
112.248 100.956 l
112.189 100.932 l
112.135 100.91 l
112.076 100.886 l
112.021 100.863 l
111.967 100.841 l
111.909 100.817 l
111.854 100.795 l
111.795 100.771 l
111.737 100.747 l
111.683 100.725 l
111.625 100.701 l
111.57 100.679 l
111.517 100.657 l
111.459 100.634 l
111.405 100.611 l
111.347 100.588 l
111.292 100.565 l
111.239 100.544 l
111.181 100.52 l
111.127 100.498 l
111.069 100.474 l
111.012 100.451 l
110.958 100.429 l
110.9 100.405 l
110.846 100.383 l
110.794 100.361 l
110.736 100.338 l
110.683 100.316 l
110.625 100.292 l
110.568 100.269 l
110.516 100.248 l
110.458 100.224 l
110.405 100.202 l
110.347 100.179 l
110.29 100.156 l
110.238 100.134 l
110.18 100.11 l
110.127 100.089 l
110.075 100.067 l
110.018 100.044 l
109.965 100.022 l
109.908 99.999 l
109.852 99.976 l
109.799 99.955 l
109.743 99.931 l
109.69 99.91 l
109.638 99.889 l
109.582 99.866 l
109.53 99.844 l
109.473 99.821 l
109.42 99.799 l
109.368 99.778 l
109.312 99.755 l
109.26 99.734 l
109.203 99.71 l
109.148 99.688 l
109.096 99.666 l
109.04 99.643 l
108.987 99.622 l
108.936 99.601 l
108.88 99.578 l
108.829 99.557 l
108.772 99.534 l
108.717 99.511 l
108.666 99.49 l
108.611 99.468 l
108.559 99.446 l
108.503 99.423 l
108.448 99.401 l
108.396 99.38 l
108.341 99.357 l
108.289 99.336 l
108.238 99.315 l
108.183 99.292 l
108.132 99.271 l
108.076 99.249 l
108.022 99.226 l
107.971 99.205 l
107.916 99.183 l
107.865 99.162 l
107.815 99.141 l
107.76 99.119 l
107.709 99.098 l
107.654 99.075 l
107.603 99.054 l
107.553 99.034 l
107.498 99.011 l
107.448 98.99 l
107.393 98.968 l
107.339 98.946 l
107.288 98.925 l
107.234 98.903 l
107.183 98.882 l
107.133 98.861 l
107.079 98.839 l
107.029 98.819 l
106.975 98.796 l
106.921 98.774 l
106.872 98.754 l
106.818 98.732 l
106.767 98.711 l
106.718 98.691 l
106.665 98.669 l
106.615 98.648 l
106.561 98.626 l
106.511 98.606 l
106.462 98.585 l
106.408 98.563 l
106.358 98.543 l
106.305 98.521 l
106.252 98.499 l
106.202 98.479 l
106.149 98.457 l
106.099 98.436 l
106.051 98.416 l
105.998 98.394 l
105.948 98.374 l
105.895 98.352 l
105.843 98.331 l
105.794 98.311 l
105.741 98.289 l
105.692 98.268 l
105.639 98.246 l
105.586 98.225 l
105.537 98.205 l
105.485 98.183 l
105.435 98.163 l
105.387 98.143 l
105.335 98.121 l
105.286 98.101 l
105.233 98.079 l
105.181 98.058 l
105.133 98.038 l
105.081 98.017 l
105.032 97.997 l
104.984 97.977 l
104.933 97.955 l
104.884 97.936 l
104.832 97.914 l
104.783 97.894 l
104.735 97.874 l
104.684 97.853 l
104.635 97.833 l
104.583 97.811 l
104.532 97.79 l
104.484 97.77 l
104.432 97.749 l
104.384 97.729 l
104.337 97.709 l
104.285 97.688 l
104.238 97.669 l
104.186 97.647 l
104.135 97.626 l
104.088 97.607 l
104.037 97.585 l
103.989 97.566 l
103.937 97.544 l
103.886 97.523 l
103.839 97.504 l
103.788 97.483 l
103.74 97.463 l
103.693 97.443 l
103.642 97.422 l
103.595 97.403 l
103.544 97.382 l
103.494 97.361 l
103.447 97.341 l
103.396 97.32 l
103.349 97.301 l
103.302 97.282 l
103.252 97.261 l
103.205 97.241 l
103.155 97.22 l
103.105 97.2 l
103.059 97.181 l
103.008 97.16 l
102.962 97.14 l
102.911 97.119 l
102.861 97.099 l
102.815 97.079 l
102.765 97.059 l
102.718 97.039 l
102.672 97.02 l
102.622 97.0 l
102.576 96.98 l
102.526 96.959 l
102.476 96.939 l
102.43 96.92 l
102.381 96.899 l
102.334 96.88 l
102.289 96.861 l
102.24 96.841 l
102.194 96.822 l
102.144 96.801 l
102.098 96.782 l
102.052 96.763 l
102.003 96.742 l
101.957 96.723 l
101.908 96.703 l
101.859 96.682 l
101.814 96.664 l
101.764 96.643 l
101.718 96.624 l
101.673 96.605 l
101.625 96.585 l
101.579 96.566 l
101.53 96.546 l
101.482 96.526 l
101.437 96.507 l
101.388 96.487 l
101.343 96.468 l
101.294 96.447 l
101.245 96.427 l
101.201 96.408 l
101.152 96.388 l
101.106 96.369 l
101.062 96.351 l
101.014 96.33 l
100.969 96.312 l
100.92 96.291 l
100.872 96.271 l
100.828 96.253 l
100.78 96.233 l
100.735 96.214 l
100.691 96.196 l
100.643 96.176 l
100.598 96.157 l
100.55 96.137 l
100.505 96.118 l
100.461 96.1 l
100.413 96.08 l
100.369 96.061 l
100.321 96.041 l
100.274 96.021 l
100.23 96.003 l
100.182 95.983 l
100.137 95.964 l
100.094 95.946 l
100.046 95.926 l
100.002 95.908 l
99.955 95.888 l
99.908 95.868 l
99.864 95.85 l
99.817 95.83 l
99.773 95.812 l
99.73 95.794 l
99.683 95.774 l
99.64 95.756 l
99.592 95.736 l
99.548 95.717 l
99.505 95.699 l
99.458 95.68 l
99.415 95.661 l
99.368 95.642 l
99.321 95.622 l
99.278 95.604 l
99.231 95.584 l
99.188 95.566 l
99.145 95.548 l
99.099 95.529 l
99.056 95.511 l
99.009 95.491 l
98.963 95.472 l
98.92 95.454 l
98.874 95.434 l
98.831 95.416 l
98.784 95.396 l
98.738 95.377 l
98.696 95.359 l
98.649 95.34 l
98.606 95.321 l
98.564 95.304 l
98.518 95.284 l
98.475 95.266 l
98.429 95.247 l
98.384 95.228 l
98.342 95.21 l
98.296 95.191 l
98.253 95.173 l
98.211 95.155 l
98.166 95.136 l
98.124 95.118 l
98.078 95.099 l
98.035 95.081 l
97.993 95.063 l
97.948 95.044 l
97.906 95.026 l
97.86 95.007 l
97.815 94.988 l
97.773 94.97 l
97.728 94.951 l
97.685 94.933 l
97.644 94.915 l
97.599 94.896 l
97.557 94.879 l
97.512 94.859 l
97.467 94.841 l
97.426 94.823 l
97.381 94.804 l
97.339 94.786 l
97.294 94.767 l
97.25 94.748 l
97.208 94.731 l
97.163 94.712 l
97.121 94.694 l
97.08 94.677 l
97.036 94.658 l
96.995 94.64 l
96.95 94.621 l
96.906 94.602 l
96.865 94.585 l
96.82 94.566 l
96.779 94.548 l
96.738 94.531 l
96.694 94.513 l
96.653 94.495 l
96.609 94.476 l
96.565 94.458 l
96.525 94.44 l
96.481 94.422 l
96.44 94.404 l
96.396 94.385 l
96.352 94.367 l
96.311 94.349 l
96.267 94.331 l
96.226 94.313 l
96.186 94.296 l
96.143 94.278 l
96.102 94.26 l
96.058 94.242 l
96.015 94.223 l
95.975 94.206 l
95.932 94.187 l
95.891 94.17 l
95.851 94.153 l
95.808 94.135 l
95.768 94.118 l
95.724 94.099 l
95.684 94.082 l
95.644 94.065 l
95.601 94.046 l
95.561 94.029 l
95.517 94.01 l
95.475 93.992 l
95.435 93.975 l
95.392 93.957 l
95.352 93.939 l
95.312 93.923 l
95.27 93.904 l
95.23 93.887 l
95.187 93.869 l
95.145 93.851 l
95.105 93.834 l
95.063 93.815 l
95.023 93.798 l
94.98 93.78 l
94.938 93.762 l
94.898 93.745 l
94.856 93.726 l
94.816 93.709 l
94.777 93.693 l
94.735 93.674 l
94.695 93.658 l
94.653 93.639 l
94.611 93.621 l
94.572 93.604 l
94.53 93.586 l
94.491 93.569 l
94.452 93.553 l
94.41 93.535 l
94.371 93.518 l
94.329 93.5 l
94.29 93.483 l
94.251 93.466 l
94.209 93.448 l
94.171 93.431 l
94.128 93.413 l
94.087 93.395 l
94.048 93.378 l
94.007 93.36 l
93.968 93.344 l
93.93 93.327 l
93.888 93.309 l
93.85 93.292 l
93.808 93.274 l
93.767 93.257 l
93.729 93.24 l
93.687 93.222 l
93.649 93.206 l
93.607 93.187 l
93.566 93.17 l
93.528 93.153 l
93.487 93.135 l
93.448 93.118 l
93.41 93.102 l
93.37 93.084 l
93.331 93.068 l
93.29 93.05 l
93.25 93.032 l
93.212 93.016 l
93.171 92.998 l
93.133 92.981 l
93.095 92.965 l
93.055 92.947 l
93.017 92.931 l
92.976 92.913 l
92.936 92.896 l
92.899 92.879 l
92.858 92.862 l
92.82 92.845 l
92.78 92.827 l
92.739 92.81 l
92.702 92.794 l
92.662 92.776 l
92.624 92.759 l
92.587 92.743 l
92.547 92.726 l
92.509 92.709 l
92.469 92.692 l
92.429 92.674 l
92.392 92.658 l
92.352 92.641 l
92.315 92.624 l
92.278 92.608 l
92.238 92.591 l
92.201 92.574 l
92.161 92.557 l
92.124 92.54 l
92.087 92.524 l
92.048 92.507 l
92.011 92.491 l
91.97 92.473 l
91.931 92.456 l
91.895 92.44 l
91.855 92.422 l
91.818 92.406 l
91.782 92.39 l
91.742 92.373 l
91.706 92.357 l
91.666 92.339 l
91.627 92.322 l
91.591 92.306 l
91.552 92.289 l
91.515 92.273 l
91.475 92.255 l
91.436 92.238 l
91.4 92.222 l
91.361 92.205 l
91.324 92.188 l
91.288 92.173 l
91.25 92.155 l
91.213 92.139 l
91.174 92.122 l
91.136 92.105 l
91.1 92.089 l
91.061 92.072 l
91.025 92.056 l
90.989 92.04 l
90.951 92.023 l
90.915 92.007 l
90.876 91.99 l
90.84 91.974 l
90.804 91.958 l
90.766 91.941 l
90.73 91.925 l
90.691 91.908 l
90.653 91.891 l
90.617 91.875 l
90.579 91.858 l
90.543 91.842 l
90.508 91.826 l
90.47 91.809 l
90.434 91.794 l
90.396 91.776 l
90.358 91.76 l
90.323 91.744 l
90.285 91.727 l
90.249 91.711 l
90.214 91.696 l
90.177 91.679 l
90.141 91.663 l
90.103 91.646 l
90.068 91.63 l
90.033 91.615 l
89.995 91.598 l
89.96 91.582 l
89.922 91.565 l
89.885 91.548 l
89.85 91.533 l
89.812 91.516 l
89.777 91.5 l
89.743 91.484 l
89.705 91.468 l
89.67 91.452 l
89.633 91.435 l
89.596 91.419 l
89.561 91.403 l
89.524 91.386 l
89.489 91.371 l
89.451 91.354 l
89.414 91.337 l
89.38 91.321 l
89.343 91.305 l
89.308 91.289 l
89.274 91.274 l
89.237 91.257 l
89.202 91.241 l
89.165 91.225 l
89.128 91.208 l
89.094 91.193 l
89.057 91.176 l
89.023 91.16 l
88.989 91.145 l
88.953 91.129 l
88.919 91.113 l
88.882 91.096 l
88.847 91.081 l
88.813 91.066 l
88.777 91.049 l
88.743 91.033 l
88.706 91.017 l
88.67 91.0 l
88.636 90.985 l
88.599 90.968 l
88.565 90.953 l
88.532 90.938 l
88.495 90.921 l
88.462 90.906 l
88.425 90.889 l
88.389 90.873 l
88.356 90.858 l
88.32 90.841 l
88.286 90.826 l
88.249 90.809 l
88.213 90.793 l
88.18 90.777 l
88.144 90.761 l
88.11 90.746 l
88.077 90.73 l
88.041 90.714 l
88.008 90.699 l
87.971 90.682 l
87.936 90.666 l
87.903 90.651 l
87.867 90.634 l
87.834 90.619 l
87.801 90.604 l
87.765 90.588 l
87.732 90.573 l
87.696 90.556 l
87.661 90.54 l
87.629 90.525 l
87.593 90.509 l
87.56 90.493 l
87.524 90.477 l
87.489 90.461 l
87.456 90.446 l
87.421 90.429 l
87.388 90.414 l
87.355 90.399 l
87.32 90.383 l
87.287 90.368 l
87.252 90.351 l
87.217 90.335 l
87.185 90.32 l
87.15 90.304 l
87.117 90.289 l
87.085 90.274 l
87.05 90.258 l
87.018 90.243 l
86.982 90.227 l
86.95 90.212 l
86.918 90.197 l
86.883 90.181 l
86.85 90.166 l
86.815 90.149 l
86.781 90.133 l
86.749 90.118 l
86.714 90.102 l
86.682 90.087 l
86.65 90.072 l
86.615 90.056 l
86.583 90.041 l
86.548 90.025 l
86.514 90.009 l
86.483 89.994 l
86.448 89.978 l
86.416 89.963 l
86.381 89.947 l
86.347 89.931 l
86.315 89.916 l
86.281 89.9 l
86.249 89.885 l
86.217 89.87 l
86.183 89.855 l
86.152 89.84 l
86.117 89.823 l
86.083 89.808 l
86.052 89.793 l
86.018 89.777 l
85.986 89.762 l
85.955 89.747 l
85.921 89.731 l
85.89 89.717 l
85.856 89.701 l
85.824 89.686 l
85.793 89.671 l
85.759 89.655 l
85.727 89.64 l
85.693 89.624 l
85.66 89.608 l
85.629 89.594 l
85.595 89.578 l
85.564 89.563 l
85.533 89.548 l
85.499 89.533 l
85.468 89.518 l
85.434 89.502 l
85.401 89.486 l
85.37 89.472 l
85.337 89.456 l
85.306 89.441 l
85.275 89.426 l
85.242 89.411 l
85.211 89.396 l
85.178 89.38 l
85.147 89.365 l
85.116 89.351 l
85.083 89.335 l
85.052 89.32 l
85.019 89.305 l
84.986 89.289 l
84.956 89.274 l
84.923 89.259 l
84.892 89.244 l
84.862 89.229 l
84.829 89.214 l
84.798 89.199 l
84.765 89.183 l
84.733 89.168 l
84.702 89.153 l
84.67 89.138 l
84.639 89.123 l
84.606 89.107 l
84.574 89.092 l
84.543 89.077 l
84.511 89.061 l
84.48 89.047 l
84.45 89.032 l
84.418 89.017 l
84.387 89.002 l
84.355 88.986 l
84.323 88.971 l
84.293 88.956 l
84.26 88.941 l
84.23 88.926 l
84.2 88.912 l
84.168 88.896 l
84.138 88.882 l
84.106 88.866 l
84.076 88.852 l
84.046 88.837 l
84.014 88.822 l
83.984 88.807 l
83.951 88.791 l
83.92 88.776 l
83.89 88.762 l
83.858 88.746 l
83.828 88.731 l
83.799 88.717 l
83.767 88.702 l
83.737 88.687 l
83.705 88.672 l
83.674 88.656 l
83.644 88.642 l
83.612 88.627 l
83.583 88.612 l
83.551 88.596 l
83.519 88.581 l
83.49 88.567 l
83.458 88.551 l
83.428 88.537 l
83.399 88.522 l
83.368 88.507 l
83.338 88.493 l
83.307 88.477 l
83.275 88.462 l
83.246 88.447 l
83.215 88.432 l
83.185 88.418 l
83.157 88.403 l
83.126 88.388 l
83.096 88.374 l
83.065 88.358 l
83.036 88.344 l
83.007 88.33 l
82.976 88.314 l
82.947 88.3 l
82.915 88.284 l
82.884 88.269 l
82.855 88.255 l
82.824 88.239 l
82.795 88.225 l
82.767 88.211 l
82.736 88.196 l
82.707 88.181 l
82.676 88.166 l
82.645 88.151 l
82.617 88.137 l
82.586 88.121 l
82.557 88.107 l
82.529 88.093 l
82.498 88.078 l
82.47 88.064 l
82.439 88.048 l
82.41 88.034 l
82.382 88.02 l
82.351 88.004 l
82.323 87.99 l
82.292 87.975 l
82.261 87.96 l
82.233 87.946 l
82.203 87.93 l
82.174 87.916 l
82.146 87.902 l
82.116 87.887 l
82.088 87.873 l
82.057 87.857 l
82.027 87.842 l
81.999 87.828 l
81.969 87.813 l
81.941 87.799 l
81.91 87.783 l
81.88 87.768 l
81.852 87.754 l
81.822 87.739 l
81.793 87.725 l
81.766 87.711 l
81.736 87.695 l
81.708 87.681 l
81.677 87.666 l
81.648 87.651 l
81.62 87.637 l
81.59 87.622 l
81.562 87.608 l
81.535 87.594 l
81.505 87.579 l
81.477 87.565 l
81.447 87.549 l
81.419 87.535 l
81.392 87.521 l
81.362 87.506 l
81.334 87.492 l
81.304 87.477 l
81.275 87.462 l
81.248 87.448 l
81.218 87.432 l
81.19 87.418 l
81.163 87.404 l
81.134 87.389 l
81.106 87.375 l
81.076 87.36 l
81.047 87.345 l
81.02 87.331 l
80.991 87.316 l
80.963 87.302 l
80.933 87.287 l
80.904 87.272 l
80.877 87.258 l
80.848 87.243 l
80.82 87.229 l
80.793 87.215 l
80.764 87.2 l
80.737 87.186 l
80.708 87.171 l
80.679 87.156 l
80.652 87.142 l
80.623 87.127 l
80.595 87.113 l
80.569 87.099 l
80.54 87.084 l
80.513 87.07 l
80.484 87.055 l
80.455 87.04 l
80.429 87.026 l
80.4 87.011 l
80.373 86.997 l
80.344 86.982 l
80.315 86.967 l
80.288 86.953 l
80.26 86.938 l
80.233 86.924 l
80.206 86.91 l
80.178 86.895 l
80.151 86.881 l
80.122 86.866 l
80.094 86.852 l
80.067 86.838 l
80.039 86.823 l
80.012 86.809 l
79.986 86.795 l
79.958 86.78 l
79.931 86.766 l
79.903 86.751 l
79.876 86.737 l
79.85 86.723 l
79.821 86.709 l
79.795 86.695 l
79.766 86.68 l
79.738 86.665 l
79.712 86.651 l
79.684 86.636 l
79.657 86.622 l
79.631 86.608 l
79.603 86.593 l
79.577 86.58 l
79.549 86.565 l
79.521 86.55 l
79.495 86.536 l
79.467 86.521 l
79.441 86.507 l
79.412 86.492 l
79.385 86.477 l
79.359 86.464 l
79.331 86.449 l
79.304 86.435 l
79.279 86.421 l
79.251 86.406 l
79.225 86.392 l
79.197 86.377 l
79.169 86.363 l
79.144 86.349 l
79.116 86.334 l
79.09 86.32 l
79.065 86.306 l
79.037 86.292 l
79.011 86.278 l
78.984 86.263 l
78.958 86.249 l
78.932 86.235 l
78.905 86.22 l
78.879 86.207 l
78.851 86.192 l
78.824 86.177 l
78.798 86.163 l
78.771 86.148 l
78.745 86.134 l
78.72 86.121 l
78.693 86.106 l
78.667 86.092 l
78.64 86.077 l
78.612 86.063 l
78.587 86.049 l
78.56 86.034 l
78.535 86.02 l
78.51 86.007 l
78.483 85.992 l
78.457 85.978 l
78.43 85.963 l
78.405 85.95 l
78.38 85.936 l
78.352 85.921 l
78.327 85.907 l
78.3 85.892 l
78.273 85.878 l
78.248 85.864 l
78.221 85.849 l
78.196 85.835 l
78.171 85.822 l
78.144 85.807 l
78.119 85.793 l
78.092 85.779 l
78.066 85.764 l
78.041 85.75 l
78.014 85.736 l
77.989 85.722 l
77.962 85.707 l
77.936 85.692 l
77.911 85.679 l
77.884 85.664 l
77.859 85.65 l
77.834 85.636 l
77.808 85.622 l
77.783 85.608 l
77.756 85.593 l
77.73 85.578 l
77.705 85.565 l
77.679 85.55 l
77.654 85.536 l
77.63 85.523 l
77.603 85.508 l
77.579 85.494 l
77.552 85.48 l
77.528 85.466 l
77.503 85.452 l
77.477 85.437 l
77.452 85.424 l
77.426 85.409 l
77.4 85.394 l
77.375 85.381 l
77.349 85.366 l
77.324 85.352 l
77.3 85.339 l
77.274 85.324 l
77.25 85.31 l
77.224 85.295 l
77.198 85.281 l
77.174 85.267 l
77.148 85.252 l
77.123 85.239 l
77.097 85.224 l
77.071 85.209 l
77.047 85.196 l
77.021 85.181 l
76.996 85.167 l
76.973 85.154 l
76.947 85.139 l
76.923 85.125 l
76.897 85.11 l
76.871 85.096 l
76.847 85.082 l
76.821 85.067 l
76.797 85.054 l
76.773 85.04 l
76.748 85.026 l
76.724 85.012 l
76.698 84.997 l
76.673 84.983 l
76.649 84.969 l
76.623 84.954 l
76.599 84.941 l
76.574 84.926 l
76.548 84.911 l
76.524 84.898 l
76.499 84.883 l
76.475 84.869 l
76.451 84.856 l
76.426 84.841 l
76.402 84.827 l
76.377 84.813 l
76.352 84.798 l
76.328 84.785 l
76.303 84.77 l
76.279 84.756 l
76.256 84.743 l
76.231 84.728 l
76.207 84.715 l
76.182 84.7 l
76.158 84.686 l
76.135 84.673 l
76.109 84.658 l
76.086 84.644 l
76.061 84.629 l
76.036 84.615 l
76.012 84.601 l
75.987 84.587 l
75.964 84.573 l
75.941 84.559 l
75.916 84.545 l
75.892 84.531 l
75.867 84.516 l
75.842 84.502 l
75.819 84.488 l
75.794 84.474 l
75.771 84.46 l
75.746 84.445 l
75.721 84.431 l
75.698 84.417 l
75.673 84.402 l
75.65 84.389 l
75.627 84.375 l
75.602 84.36 l
75.579 84.347 l
75.554 84.332 l
75.53 84.317 l
75.507 84.304 l
75.482 84.289 l
75.459 84.276 l
75.436 84.262 l
75.412 84.248 l
75.389 84.234 l
75.364 84.219 l
75.341 84.205 l
75.318 84.192 l
75.294 84.177 l
75.271 84.164 l
75.246 84.149 l
75.222 84.134 l
75.199 84.121 l
75.174 84.106 l
75.151 84.092 l
75.129 84.079 l
75.105 84.064 l
75.082 84.051 l
75.057 84.036 l
75.033 84.021 l
75.011 84.008 l
74.986 83.993 l
74.964 83.979 l
74.942 83.966 l
74.917 83.951 l
74.895 83.938 l
74.871 83.923 l
74.848 83.909 l
74.826 83.896 l
74.801 83.881 l
74.779 83.868 l
74.755 83.853 l
74.731 83.838 l
74.708 83.825 l
74.684 83.81 l
74.662 83.796 l
74.64 83.783 l
74.616 83.768 l
74.593 83.755 l
74.569 83.74 l
74.545 83.725 l
74.523 83.712 l
74.499 83.697 l
74.477 83.684 l
74.453 83.669 l
74.429 83.654 l
74.407 83.641 l
74.383 83.626 l
74.361 83.612 l
74.339 83.599 l
74.315 83.584 l
74.293 83.57 l
74.269 83.556 l
74.246 83.541 l
74.224 83.528 l
74.2 83.513 l
74.178 83.499 l
74.156 83.486 l
74.132 83.471 l
74.111 83.457 l
74.087 83.443 l
74.065 83.429 l
74.043 83.415 l
74.019 83.401 l
73.997 83.387 l
73.974 83.372 l
73.95 83.358 l
73.928 83.344 l
73.905 83.329 l
73.883 83.316 l
73.861 83.302 l
73.838 83.288 l
73.816 83.274 l
73.793 83.259 l
73.77 83.245 l
73.748 83.231 l
73.725 83.216 l
73.703 83.203 l
73.679 83.188 l
73.656 83.173 l
73.635 83.16 l
73.611 83.145 l
73.589 83.131 l
73.568 83.118 l
73.545 83.103 l
73.523 83.089 l
73.5 83.074 l
73.477 83.06 l
73.455 83.046 l
73.432 83.032 l
73.411 83.018 l
73.389 83.004 l
73.366 82.99 l
73.345 82.976 l
73.322 82.961 l
73.3 82.947 l
73.279 82.934 l
73.256 82.919 l
73.235 82.905 l
73.211 82.891 l
73.189 82.876 l
73.167 82.862 l
73.144 82.848 l
73.123 82.834 l
73.102 82.82 l
73.079 82.806 l
73.058 82.792 l
73.035 82.777 l
73.012 82.762 l
72.991 82.749 l
72.968 82.734 l
72.947 82.72 l
72.926 82.707 l
72.904 82.692 l
72.883 82.679 l
72.86 82.664 l
72.838 82.65 l
72.817 82.636 l
72.795 82.622 l
72.774 82.608 l
72.751 82.593 l
72.728 82.578 l
72.708 82.565 l
72.685 82.55 l
72.664 82.536 l
72.643 82.523 l
72.621 82.508 l
72.6 82.494 l
72.577 82.479 l
72.555 82.465 l
72.534 82.451 l
72.512 82.437 l
72.491 82.423 l
72.468 82.408 l
72.446 82.393 l
72.425 82.379 l
72.403 82.365 l
72.382 82.351 l
72.361 82.337 l
72.339 82.322 l
72.318 82.309 l
72.296 82.294 l
72.273 82.279 l
72.253 82.266 l
72.231 82.251 l
72.21 82.237 l
72.189 82.223 l
72.167 82.209 l
72.147 82.195 l
72.124 82.18 l
72.104 82.166 l
72.083 82.152 l
72.061 82.138 l
72.04 82.124 l
72.018 82.109 l
71.996 82.094 l
71.976 82.081 l
71.954 82.066 l
71.933 82.052 l
71.913 82.038 l
71.891 82.023 l
71.87 82.01 l
71.848 81.995 l
71.826 81.98 l
71.806 81.966 l
71.784 81.952 l
71.764 81.938 l
71.742 81.923 l
71.72 81.908 l
71.7 81.894 l
71.678 81.879 l
71.657 81.865 l
71.637 81.852 l
71.615 81.837 l
71.595 81.823 l
71.573 81.808 l
71.551 81.793 l
71.531 81.78 l
71.509 81.765 l
71.489 81.751 l
71.469 81.737 l
71.447 81.722 l
71.427 81.709 l
71.405 81.694 l
71.384 81.679 l
71.364 81.665 l
71.342 81.65 l
71.322 81.636 l
71.3 81.621 l
71.279 81.607 l
71.259 81.593 l
71.237 81.578 l
71.217 81.564 l
71.197 81.55 l
71.176 81.535 l
71.156 81.521 l
71.134 81.506 l
71.113 81.492 l
71.093 81.478 l
71.072 81.463 l
71.052 81.449 l
71.032 81.435 l
71.011 81.421 l
70.991 81.407 l
70.969 81.392 l
70.949 81.378 l
70.93 81.364 l
70.908 81.349 l
70.888 81.335 l
70.867 81.32 l
70.846 81.305 l
70.826 81.291 l
70.805 81.276 l
70.785 81.262 l
70.765 81.249 l
70.744 81.234 l
70.724 81.22 l
70.703 81.205 l
70.682 81.19 l
70.663 81.176 l
70.641 81.161 l
70.622 81.147 l
70.6 81.132 l
70.579 81.117 l
70.56 81.103 l
70.538 81.088 l
70.519 81.074 l
70.499 81.06 l
70.478 81.045 l
70.459 81.031 l
70.437 81.016 l
70.417 81.001 l
70.397 80.987 l
70.376 80.972 l
70.357 80.958 l
70.337 80.945 l
70.317 80.93 l
70.297 80.916 l
70.276 80.901 l
70.256 80.886 l
70.237 80.873 l
70.216 80.858 l
70.197 80.844 l
70.176 80.828 l
70.155 80.813 l
70.136 80.799 l
70.115 80.784 l
70.095 80.77 l
70.076 80.756 l
70.055 80.741 l
70.036 80.727 l
70.015 80.712 l
69.995 80.697 l
69.976 80.683 l
69.955 80.668 l
69.935 80.654 l
69.916 80.64 l
69.896 80.625 l
69.877 80.611 l
69.856 80.596 l
69.837 80.582 l
69.818 80.568 l
69.797 80.553 l
69.778 80.539 l
69.757 80.524 l
69.737 80.509 l
69.718 80.495 l
69.697 80.479 l
69.678 80.465 l
69.659 80.451 l
69.638 80.436 l
69.619 80.422 l
69.599 80.407 l
69.578 80.392 l
69.56 80.378 l
69.539 80.363 l
69.52 80.349 l
69.499 80.333 l
69.479 80.318 l
69.46 80.304 l
69.44 80.289 l
69.42 80.275 l
69.402 80.261 l
69.381 80.245 l
69.362 80.231 l
69.342 80.216 l
69.322 80.201 l
69.303 80.187 l
69.283 80.172 l
69.264 80.157 l
69.245 80.143 l
69.225 80.128 l
69.206 80.114 l
69.186 80.099 l
69.167 80.085 l
69.148 80.07 l
69.128 80.055 l
69.109 80.041 l
69.089 80.026 l
69.069 80.01 l
69.05 79.996 l
69.03 79.981 l
69.011 79.967 l
68.992 79.953 l
68.972 79.937 l
68.954 79.923 l
68.933 79.908 l
68.914 79.893 l
68.895 79.879 l
68.875 79.863 l
68.856 79.849 l
68.836 79.833 l
68.816 79.818 l
68.797 79.804 l
68.777 79.789 l
68.759 79.774 l
68.74 79.76 l
68.72 79.745 l
68.702 79.731 l
68.681 79.715 l
68.662 79.7 l
68.643 79.686 l
68.623 79.67 l
68.605 79.656 l
68.586 79.642 l
68.567 79.626 l
68.548 79.612 l
68.528 79.597 l
68.509 79.581 l
68.49 79.567 l
68.47 79.552 l
68.452 79.538 l
68.432 79.522 l
68.412 79.507 l
68.394 79.492 l
68.374 79.477 l
68.356 79.462 l
68.337 79.448 l
68.318 79.433 l
68.299 79.418 l
68.279 79.403 l
68.26 79.388 l
68.242 79.373 l
68.222 79.358 l
68.204 79.343 l
68.186 79.329 l
68.166 79.314 l
68.148 79.299 l
68.128 79.284 l
68.11 79.269 l
68.092 79.255 l
68.072 79.24 l
68.054 79.225 l
68.034 79.209 l
68.014 79.194 l
67.996 79.18 l
67.977 79.164 l
67.958 79.15 l
67.94 79.135 l
67.921 79.12 l
67.903 79.105 l
67.883 79.09 l
67.864 79.074 l
67.846 79.06 l
67.827 79.044 l
67.808 79.03 l
67.789 79.014 l
67.769 78.999 l
67.751 78.984 l
67.732 78.969 l
67.714 78.954 l
67.696 78.94 l
67.676 78.924 l
67.658 78.909 l
67.639 78.894 l
67.62 78.878 l
67.602 78.864 l
67.582 78.848 l
67.564 78.834 l
67.546 78.819 l
67.527 78.804 l
67.509 78.789 l
67.49 78.773 l
67.472 78.759 l
67.454 78.744 l
67.435 78.728 l
67.417 78.714 l
67.397 78.698 l
67.378 78.682 l
67.36 78.668 l
67.341 78.652 l
67.323 78.637 l
67.306 78.623 l
67.286 78.607 l
67.269 78.593 l
67.249 78.577 l
67.23 78.561 l
67.213 78.547 l
67.193 78.531 l
67.176 78.516 l
67.156 78.5 l
67.137 78.485 l
67.119 78.47 l
67.1 78.454 l
67.082 78.439 l
67.065 78.425 l
67.046 78.409 l
67.028 78.394 l
67.009 78.378 l
66.99 78.363 l
66.972 78.348 l
66.953 78.332 l
66.935 78.317 l
66.918 78.303 l
66.899 78.287 l
66.881 78.272 l
66.862 78.256 l
66.843 78.241 l
66.826 78.226 l
66.807 78.21 l
66.789 78.195 l
66.77 78.179 l
66.751 78.164 l
66.734 78.149 l
66.715 78.133 l
66.697 78.118 l
66.697 78.118 l
66.697 78.118 l
66.696 78.117 l
66.695 78.116 l
66.693 78.114 l
66.688 78.11 l
66.688 78.11 l
66.688 78.11 l
66.687 78.11 l
66.686 78.109 l
66.684 78.107 l
66.683 78.106 l
66.683 78.106 l
66.683 78.106 l
66.681 78.105 l
66.681 78.105 l
66.681 78.104 l
66.68 78.104 l
66.68 78.104 l
66.68 78.103 l
66.679 78.103 l
66.679 78.103 l
[/DeviceRGB] cs 0.247 0.24 0.6 sc
S
q
n
67.186 62.869 m
67.186 76.805 l
82.706 76.805 l
82.706 62.869 l
eoclip
n
q
1.0 0.0 0.0 1.0 67.186 62.869 cm
q
n
1.0 1.0 1.0 sc
0.000000 0.000000 15.520000 13.936000 rectfill

Q
Q
Q
q
n
66.186 61.869 m
66.186 77.805 l
83.706 77.805 l
83.706 61.869 l
eoclip
n
q
1.0 w
10.0 M
1.0 0.0 0.0 1.0 67.186 62.869 cm
q
n
-2.0 -2.0 m
-2.0 15.936 l
17.52 15.936 l
17.52 -2.0 l
eoclip
n
0.0 0.0 0.0 sc
0.0 11.536 m
/N16 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(x) show
%ADOBeginSubsetFont: NBMBAA+Mathematica2-Bold Initial
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NBMBAA+Mathematica2-Bold def
/FontInfo 7 dict dup begin
/Notice (Mathematica typeface design by Andre Kuzniarek. Copyright \\\(c\\\) 1996-2001 Wolfram Research, Inc. [http://www.wolfram.com]. All rights reserved. [Font version 2.00]) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5095644 def
/FontBBox {-10 -4035 2541 2205} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-587 -577 892 893] def
/BlueScale 0.1 def
/StdHW [0] def
/StdVW [0] def
/StemSnapH [0] def
/StemSnapV [0] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
end
%ADOEndSubsetFont
[ 0 /NUL/Eth/eth/Lslash/lslash/Scaron
/scaron/Yacute/yacute/HT/LF/Thorn
/thorn/CR/Zcaron/zcaron/DLE/DC1
/DC2/DC3/DC4/onehalf/onequarter/onesuperior
/threequarters/threesuperior/twosuperior/brokenbar/minus/multiply
/RS/US/Space/Radical1Extens/Radical2/Radical2Extens
/Radical3/Radical3Extens/Radical4/Radical4Extens/Radical5/Radical5VertExtens
/Radical5Top/Radical5Extens/FixedFreeRadical1/FixedFreeRadical2/FixedFreeRadical3/FixedFreeRadical4
/TexRad1/TexRad2/TexRad3/TexRad4/TexRad5/TexRad5VertExt
/TexRad5Top/TexRadExtens/LBrace1/LBrace2/LBrace3/LBrace4
/RBrace1/RBrace2/RBrace3/RBrace4/LBracket1/LBracket2
/LBracket3/LBracket4/RBracket1/RBracket2/RBracket3/RBracket4
/LParen1/LParen2/LParen3/LParen4/RParen1/RParen2
/RParen3/RParen4/DblLBracket1/DblLBracket2/DblLBracket3/DblLBracket4
/DblRBracket1/DblRBracket2/DblRBracket3/DblRBracket4/LAngleBracket1/LAngleBracket2
/LAngleBracket3/LAngleBracket4/RAngleBracket1/RAngleBracket2/RAngleBracket3/RAngleBracket4
/LCeiling1/LCeiling2/LCeiling3/LCeiling4/LFloor1/LFloor2
/LFloor3/LFloor4/LFlrClngExtens/LParenTop/LParenExtens/LParenBottom
/LBraceTop/LBraceMiddle/LBraceBottom/BraceExtens/RCeiling1/RCeiling2
/RCeiling3/RCeiling4/RFloor1/RFloor2/RFloor3/RFloor4
/RFlrClngExtens/RParenTop/RParenExtens/RParenBottom/RBraceTop/RBraceMiddle
/RBraceBottom/DEL/LBracketTop/LBracketExtens/LBracketBottom/RBracketTop
/RBracketExtens/RBracketBottom/DblLBracketBottom/DblLBracketExtens/DblLBracketTop/DblRBracketBottom
/DblRBracketExtens/DblRBracketTop/LeftHook/HookExt/RightHook/Radical1
/Slash1/Slash2/Slash3/Slash4/BackSlash1/BackSlash2
/BackSlash3/BackSlash4/ContourIntegral/DblContInteg/CntrClckwContInteg/ClckwContInteg
/SquareContInteg/UnionPlus/SquareIntersection/SquareUnion/LBracketBar1/LBracketBar2
/LBracketBar3/LBracketBar4/RBracketBar1/RBracketBar2/RBracketBar3/RBracketBar4
/ContourIntegral2/DblContInteg2/CntrClckwContInteg2/ClckwContInteg2/SquareContInteg2/UnionPlus2
/SquareIntersection2/SquareUnion2/DblLBracketBar1/DblLBracketBar2/DblLBracketBar3/DblLBracketBar4
/DblRBracketBar1/DblRBracketBar2/DblRBracketBar3/DblRBracketBar4/ContourIntegral3/DblContInteg3
/CntrClckwContInteg3/ClckwContInteg3/SquareContInteg3/UnionPlus3/SquareIntersection3/SquareUnion3
/DblBar1/DblBar2/DblBar3/DblBar4/BarExt/DblBarExt
/OverCircle/Hacek/VertBar1/VertBar2/Nbspace/VertBar3
/VertBar4/FIntegral/FIntegral2/FIntegral3/OverDoubleDot/OverTripleDot
/OverLVector/OverRVector/OverLRVector/OverLArrow/OverArrowVectExt/OverRArrow
/OverLRArrow/Integral/Summation/Product/Intersection/Union
/LogicalOr/LogicalAnd/Integral1/Integral2/Sum1/Sum2
/Product1/Product2/Union1/Union2/Intersect1/Intersect2
/Or1/Or2/And1/And2/SmallVee/SmallWedge
/DoubleGrave/Breve/DownBreve/OverTilde/Tilde2/Tilde3
/Tilde4/BackQuote/DblBackQuote/Quote/DblQuote/VertBar
/DblVertBar/VertBarExten/DblVertBarExten/Coproduct
/N15 (NBMBAA+Mathematica2-Bold) -1 TZ
5.64 7.0 m
%ADOBeginSubsetFont: NBMBAA+Mathematica2-Bold AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
/NBMBAA+Mathematica2-Bold findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/LParen1 <1C60D8A8C9B80F37B8DBDCEC2EE5978054AB09CAC3041D6F181379
A049E25FBCF3A42AF88BE75509F4E19CD40EA42C3653B5535477F7D62C28F439
A5FDF9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/NBMBAA+Mathematica2-Bold findfont /Encoding get
dup 72 /LParen1 put
pop
end
%ADOEndSubsetFont
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(H) show
8.4 7.0 m
/N16 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(1) show
12.36 7.0 m
%ADOBeginSubsetFont: NBMBAA+Mathematica2-Bold AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
/NBMBAA+Mathematica2-Bold findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/RParen1 <1C60D8A8C9B80F37F24EE1A0ECD271E5B0095C3FD77ECAEB953906
5861932F77E7C1E33C4C2538903962628FBA2593C2A0BBA89328949C201202A1
6B39E26AB83B2A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/NBMBAA+Mathematica2-Bold findfont /Encoding get
dup 76 /RParen1 put
pop
end
%ADOEndSubsetFont
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(L) show
Q
1.0 0.0 0.0 1.0 -67.186 -62.869 cm
Q
Q
[3.2 3.2 ] 0.0 d
n
125.753 119.245 m
125.753 107.612 121.132 96.455 112.906 88.229 c
104.68 80.003 93.523 75.381 81.889 75.381 c
70.256 75.381 59.099 80.003 50.873 88.229 c
42.647 96.455 38.026 107.612 38.026 119.245 c
38.026 130.879 42.647 142.035 50.873 150.262 c
59.099 158.488 70.256 163.109 81.889 163.109 c
93.523 163.109 104.68 158.488 112.906 150.262 c
121.132 142.035 125.753 130.879 125.753 119.245 c
h
0.0 1.0 0.0 sc
S
q
n
109.427 119.456 m
109.427 135.567 l
125.547 135.567 l
125.547 119.456 l
eoclip
n
q
1.0 0.0 0.0 1.0 109.427 119.456 cm
q
n
1.0 1.0 1.0 sc
0.000000 0.000000 16.120001 16.111000 rectfill

Q
Q
Q
q
n
108.427 118.456 m
108.427 136.567 l
126.547 136.567 l
126.547 118.456 l
eoclip
n
q
1.0 w
[] 0.0 d
10.0 M
1.0 0.0 0.0 1.0 109.427 119.456 cm
q
n
-2.0 -2.0 m
-2.0 18.111 l
18.12 18.111 l
18.12 -2.0 l
eoclip
n
0.0 0.0 0.0 sc
0.48 13.711 m
/N4 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(x) show
%ADOBeginSubsetFont: MUSAAA+Mathematica1-Bold Initial
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /MUSAAA+Mathematica1-Bold def
/FontInfo 7 dict dup begin
/Notice (Mathematica typeface design by Andre Kuzniarek, with Gregg Snyder and Stephen Wolfram. Copyright \\\(c\\\) 1996-2001 Wolfram Research, Inc. [http://www.wolfram.com]. All rights reserved. [Font version 2.00]) def
/Weight (Bold) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 5095642 def
/FontBBox {-120 -225 1598 923} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-16 0 445 468 662 677] def
/OtherBlues [-209 -203] def
/BlueScale 0.0434783 def
/StdHW [100.25] def
/StdVW [122.167] def
/StemSnapH [39.385 100.25] def
/StemSnapV [122.167 204] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
end
%ADOEndSubsetFont
[ 0 /NUL/Eth/eth/Lslash/lslash/Scaron
/scaron/Yacute/yacute/HT/LF/Thorn
/thorn/CR/Zcaron/zcaron/DLE/DC1
/DC2/DC3/DC4/onehalf/onequarter/onesuperior
/threequarters/threesuperior/twosuperior/brokenbar/minus/multiply
/RS/US/Space/Exclamation/ForAll/NumberSign
/Exists/Percent/Ampersand/SmallMember/LParen/RParen
/Star/Plus/Comma/Minus/Period/Slash
/Zero/One/Two/Three/Four/Five
/Six/Seven/Eight/Nine/Colon/SemiColon
/Less/Equal/Greater/Question/TildeFullEqual/CapAlpha
/CapBeta/CapChi/CapDelta/CapEpsilon/CapPhi/CapGamma
/CapEta/CapIota/CurlyTheta/CapKappa/CapLambda/CapMu
/CapNu/CapOmicron/CapPi/CapTheta/CapRho/CapSigma
/CapTau/CapUpsilon/FinalSigma/CapOmega/CapXi/CapPsi
/CapZeta/LBracket/Therefore/RBracket/Perpendicular/Underbar
/Hat/Alpha/Beta/Chi/Delta/Epsilon
/Phi/Gamma/Eta/Iota/CurlyPhi/Kappa
/Lambda/Mu/Nu/Omicron/Pi/Theta
/Rho/Sigma/Tau/Upsilon/CurlyPi/Omega
/Xi/Psi/Zeta/LBrace/VertBar/RBrace
/Tilde/DEL/FractionBarExt/EscapeChar/SelectPlaceholder/Placeholder
/Continuation/Skeleton/LSkeleton/RSkeleton/Spacer/Cross
/DblEqual/Grave/Acute/DoubleAcute/OverTilde/OverBar
/DblUpDownArrow/DblUpExtens1/DblLongLArrow/DblExtens/DblLongRArrow/DblLRArrow2
/DblLongLRArrow/UpDownArrow/LongLArrow/LongRArrow/LongLRArrow/ColonEqual
/Diamond2/NotSquareSprsetEqual/AtSign/Solidmedsqr/OverDot/CurlyCapUpsilon
/Prime/LessEqual/Fraction/Infinity/RuleDelayed/ClubSuit
/DiamondSuit/HeartSuit/SpadeSuit/LRArrow/LArrow/UpArrow
/RArrow/DownArrow/Degree/PlusMinus/DoublePrime/GreaterEqual
/Multiply/Proportional/PartialDiff/Bullet/Divide/NotEqual
/Equivalence/Approxequal/Ellipsis/ArrowVertEx/ArrowHorizEx/CarriageReturn
/Aleph/IFraktur/RFraktur/Weierstrass/CircleMultiply/CirclePlus
/EmptySet/Union/Intersection/ProperSuperset/NbSpace/NotSubset
/ProperSubset/ReflexSubset/Element/NotElement/Angle/Gradient
/RegTM/Copyright/TM/Product/Radical/DotMath
/LogicalNot/Wedge/Vee/DblLRArrow/DblLArrow/DblUpArrow
/DblRArrow/DblDownArrow/Lozenge/LAngle/Diffd/Expe
/Imagi/Sum/LParenTop/LParenEx/LParenBot/LBracketTop
/LBracketEx/LBracketBot/LBraceTop/LBraceMid/LBraceBot/BraceEx
/Slot/RAngle/Intergral/IntegralTop/IntegralEx/IntegralBot
/RParenTop/RParenEx/RParenBot/RBracketTop/RBracketEx/RBracketBot
/RBraceTop/RBraceMid/RBraceBot/Wolf
/N10 (MUSAAA+Mathematica1-Bold) -1 TZ
1.08 6.751 m
%ADOBeginSubsetFont: MUSAAA+Mathematica1-Bold AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
/MUSAAA+Mathematica1-Bold findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Hat <1C60D8A8C9B728C5A5E8B5919456698920AEC602497780D62F6B6A7F60
0D0FA6853BA2AB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/MUSAAA+Mathematica1-Bold findfont /Encoding get
dup 96 /Hat put
pop
end
%ADOEndSubsetFont
/N10 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(`) show
6.24 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(H) show
9.0 7.0 m
/N16 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(1) show
12.96 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(L) show
Q
1.0 0.0 0.0 1.0 -109.427 -119.456 cm
Q
Q
[] 0.0 d
n
125.753 119.245 m
125.766 119.238 l
125.778 119.231 l
125.804 119.216 l
125.855 119.188 l
125.956 119.13 l
126.16 119.016 l
126.568 118.791 l
127.456 118.315 l
128.293 117.885 l
129.12 117.476 l
130.027 117.045 l
130.884 116.655 l
131.824 116.244 l
132.761 115.852 l
133.648 115.494 l
134.627 115.116 l
135.556 114.771 l
136.483 114.44 l
137.508 114.087 l
138.484 113.764 l
139.564 113.419 l
140.648 113.085 l
141.681 112.778 l
142.827 112.448 l
143.923 112.144 l
145.138 111.816 l
146.362 111.496 l
147.532 111.199 l
148.833 110.878 l
150.079 110.578 l
151.331 110.284 l
152.726 109.964 l
154.062 109.664 l
155.55 109.337 l
157.052 109.014 l
158.492 108.71 l
160.096 108.377 l
161.636 108.063 l
163.187 107.751 l
164.916 107.408 l
166.576 107.083 l
168.427 106.726 l
170.205 106.386 l
171.998 106.047 l
173.998 105.672 l
175.92 105.315 l
178.063 104.921 l
180.232 104.525 l
182.314 104.147 l
184.638 103.728 l
186.873 103.328 l
189.126 102.926 l
191.642 102.479 l
194.06 102.052 l
194.103 102.045 l
194.145 102.037 l
194.231 102.022 l
194.403 101.992 l
194.747 101.931 l
195.439 101.809 l
195.483 101.802 l
195.526 101.794 l
195.613 101.779 l
195.788 101.748 l
196.137 101.686 l
196.181 101.679 l
196.225 101.671 l
196.313 101.656 l
196.488 101.625 l
196.532 101.617 l
196.576 101.609 l
196.665 101.594 l
196.709 101.586 l
196.753 101.578 l
196.797 101.571 l
196.841 101.563 l
0.247 0.24 0.6 sc
S
q
n
197.347 86.328 m
197.347 100.264 l
212.867 100.264 l
212.867 86.328 l
eoclip
n
q
1.0 0.0 0.0 1.0 197.347 86.328 cm
q
n
1.0 1.0 1.0 sc
0.000000 0.000000 15.520000 13.936000 rectfill

Q
Q
Q
q
n
196.347 85.328 m
196.347 101.264 l
213.867 101.264 l
213.867 85.328 l
eoclip
n
q
1.0 w
10.0 M
1.0 0.0 0.0 1.0 197.347 86.328 cm
q
n
-2.0 -2.0 m
-2.0 15.936 l
17.52 15.936 l
17.52 -2.0 l
eoclip
n
0.0 0.0 0.0 sc
0.0 11.536 m
/N16 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(x) show
5.64 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(H) show
8.4 7.0 m
/N16 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(2) show
12.36 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(L) show
Q
1.0 0.0 0.0 1.0 -197.347 -86.328 cm
Q
Q
[3.2 3.2 ] 0.0 d
n
198.193 119.245 m
198.193 88.4 185.94 58.817 164.128 37.006 c
142.317 15.195 112.735 2.941 81.889 2.941 c
51.044 2.941 21.461 15.195 -0.35 37.006 c
-22.161 58.817 -34.414 88.4 -34.414 119.245 c
-34.414 150.091 -22.161 179.673 -0.35 201.484 c
21.461 223.295 51.044 235.549 81.889 235.549 c
112.735 235.549 142.317 223.295 164.128 201.484 c
185.94 179.673 198.193 150.091 198.193 119.245 c
h
0.0 1.0 0.0 sc
S
q
n
181.867 119.456 m
181.867 135.567 l
197.987 135.567 l
197.987 119.456 l
eoclip
n
q
1.0 0.0 0.0 1.0 181.867 119.456 cm
q
n
1.0 1.0 1.0 sc
0.000000 0.000000 16.120001 16.111000 rectfill

Q
Q
Q
q
n
180.867 118.456 m
180.867 136.567 l
198.987 136.567 l
198.987 118.456 l
eoclip
n
q
1.0 w
[] 0.0 d
10.0 M
1.0 0.0 0.0 1.0 181.867 119.456 cm
q
n
-2.0 -2.0 m
-2.0 18.111 l
18.12 18.111 l
18.12 -2.0 l
eoclip
n
0.0 0.0 0.0 sc
0.48 13.711 m
/N4 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(x) show
1.08 6.751 m
/N10 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(`) show
6.24 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(H) show
9.0 7.0 m
/N16 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(2) show
12.96 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(L) show
Q
1.0 0.0 0.0 1.0 -181.867 -119.456 cm
Q
Q
q
n
139.96 119.456 m
139.96 135.567 l
156.08 135.567 l
156.08 119.456 l
eoclip
n
q
1.0 0.0 0.0 1.0 139.96 119.456 cm
q
n
1.0 1.0 1.0 sc
0.000000 0.000000 16.120001 16.111000 rectfill

Q
Q
Q
q
n
138.96 118.456 m
138.96 136.567 l
157.08 136.567 l
157.08 118.456 l
eoclip
n
q
1.0 w
[] 0.0 d
10.0 M
1.0 0.0 0.0 1.0 139.96 119.456 cm
q
n
-2.0 -2.0 m
-2.0 18.111 l
18.12 18.111 l
18.12 -2.0 l
eoclip
n
0.0 0.0 0.0 sc
0.48 13.711 m
/N4 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(x) show
1.08 6.751 m
/N10 [11.2 0.0 0.0 -11.2 0.0 0.0] Tf
(`) show
6.24 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(H) show
9.0 7.0 m
/N16 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(0) show
12.96 7.0 m
/N15 [7.952 0.0 0.0 -7.952 0.0 0.0] Tf
(L) show
Q
1.0 0.0 0.0 1.0 -139.96 -119.456 cm
Q
Q
Q
0.16 w
3.25 M
q
0 J
n
81.889 119.245 m
81.889 116.603 l
[/DeviceRGB] cs 0.0 0.0 1.0 sc
S
Q
1.0 0.0 0.0 1.0 79.669 121.645 cm
q
n
-2.0 -2.0 m
-2.0 11.36 l
6.44 11.36 l
6.44 -2.0 l
eoclip
n
Q
1.0 0.0 0.0 1.0 -79.669 -121.645 cm
q
0 J
n
164.553 119.245 m
164.553 116.603 l
[/DeviceRGB] cs 0.0 0.0 1.0 sc
S
Q
q
n
162.333 121.645 m
162.333 131.005 l
166.773 131.005 l
166.773 121.645 l
eoclip
n
q
1.0 0.0 0.0 1.0 162.333 121.645 cm
q
n
[/DeviceRGB] cs 1.0 1.0 1.0 sc
0.000000 0.000000 4.440000 9.360000 rectfill

Q
Q
Q
q
n
161.333 120.645 m
161.333 132.005 l
167.773 132.005 l
167.773 120.645 l
eoclip
n
q
1.0 w
10.0 M
1.0 0.0 0.0 1.0 162.333 121.645 cm
q
n
-2.0 -2.0 m
-2.0 11.36 l
6.44 11.36 l
6.44 -2.0 l
eoclip
n
[/DeviceRGB] cs 0.0 0.0 1.0 sc
0.0 7.44 m
/N5 [8.0 0.0 0.0 -8.0 0.0 0.0] Tf
(1) show
Q
1.0 0.0 0.0 1.0 -162.333 -121.645 cm
Q
Q
1.0 0.0 0.0 1.0 244.996 121.645 cm
q
n
-2.0 -2.0 m
-2.0 11.36 l
6.44 11.36 l
6.44 -2.0 l
eoclip
n
Q
1.0 0.0 0.0 1.0 -244.996 -121.645 cm
q
0 J
n
36.08 119.245 m
249.799 119.245 l
[/DeviceGray] cs 0.0 sc
S
Q
n
248.766 116.299 m
248.93 116.634 l
249.289 117.438 l
249.48 117.922 l
249.645 118.409 l
249.76 118.863 l
249.799 119.245 l
249.76 119.591 l
249.645 120.039 l
249.48 120.543 l
249.289 121.057 l
248.93 121.935 l
248.766 122.309 l
259.96 119.245 l
248.766 116.299 l
[/DeviceGray] cs 0.0 sc
eofill
q
n
266.36 113.665 m
266.36 124.825 l
276.0 124.825 l
276.0 113.665 l
eoclip
n
q
1.0 0.0 0.0 1.0 266.36 113.665 cm
q
n
[/DeviceRGB] cs 1.0 1.0 1.0 sc
0.000000 0.000000 9.640000 11.160000 rectfill

Q
Q
Q
q
n
265.36 112.665 m
265.36 125.825 l
277.0 125.825 l
277.0 112.665 l
eoclip
n
q
1.0 w
10.0 M
1.0 0.0 0.0 1.0 266.36 113.665 cm
q
n
-2.0 -2.0 m
-2.0 13.16 l
11.64 13.16 l
11.64 -2.0 l
eoclip
n
[/DeviceRGB] cs 0.0 0.0 1.0 sc
0.0 9.0 m
/N5 [9.6 0.0 0.0 -9.6 0.0 0.0] Tf
(x) show
5.4 10.8 m
/N5 [6.816 0.0 0.0 -6.816 0.0 0.0] Tf
(1) show
Q
1.0 0.0 0.0 1.0 -266.36 -113.665 cm
Q
Q
q
0 J
n
81.889 119.245 m
84.532 119.245 l
[/DeviceRGB] cs 0.0 0.0 1.0 sc
S
Q
1.0 0.0 0.0 1.0 75.049 114.565 cm
q
n
-2.0 -2.0 m
-2.0 11.36 l
6.44 11.36 l
6.44 -2.0 l
eoclip
n
Q
1.0 0.0 0.0 1.0 -75.049 -114.565 cm
1.0 0.0 0.0 1.0 75.049 31.902 cm
q
n
-2.0 -2.0 m
-2.0 11.36 l
6.44 11.36 l
6.44 -2.0 l
eoclip
n
Q
1.0 0.0 0.0 1.0 -75.049 -31.902 cm
q
0 J
n
81.889 163.332 m
81.889 35.721 l
S
Q
n
78.943 36.754 m
79.279 36.59 l
80.082 36.231 l
80.566 36.04 l
81.053 35.875 l
81.507 35.76 l
81.889 35.721 l
82.235 35.76 l
82.683 35.875 l
83.187 36.04 l
83.701 36.231 l
84.579 36.59 l
84.953 36.754 l
81.889 25.56 l
78.943 36.754 l
eofill
q
n
77.069 9.6 m
77.069 20.76 l
86.709 20.76 l
86.709 9.6 l
eoclip
n
q
1.0 0.0 0.0 1.0 77.069 9.6 cm
q
n
[/DeviceRGB] cs 1.0 1.0 1.0 sc
0.000000 0.000000 9.640000 11.160000 rectfill

Q
Q
Q
q
n
76.069 8.6 m
76.069 21.76 l
87.709 21.76 l
87.709 8.6 l
eoclip
n
q
1.0 w
10.0 M
1.0 0.0 0.0 1.0 77.069 9.6 cm
q
n
-2.0 -2.0 m
-2.0 13.16 l
11.64 13.16 l
11.64 -2.0 l
eoclip
n
[/DeviceRGB] cs 0.0 0.0 1.0 sc
0.0 9.0 m
/N5 [9.6 0.0 0.0 -9.6 0.0 0.0] Tf
(x) show
5.4 10.8 m
/N5 [6.816 0.0 0.0 -6.816 0.0 0.0] Tf
(2) show
Q
1.0 0.0 0.0 1.0 -77.069 -9.6 cm
Q
Q
q
n
36.0 25.412 m
36.0 163.412 l
260.0 163.412 l
260.0 25.412 l
eoclip
n
Q
Q
Q
Q
/MUSAAA+Mathematica1-Bold /Font _pdfUndefineResource
/N10 /Font _pdfUndefineResource
/NBMBAA+Mathematica2-Bold /Font _pdfUndefineResource
/N15 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica-Bold
%%+ font Times-BoldItalic
%%+ font Times-Bold
%%DocumentSuppliedResources:
%%+ font NBMBAA+Mathematica2-Bold
%%+ font MUSAAA+Mathematica1-Bold
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EOF

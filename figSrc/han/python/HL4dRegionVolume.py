"""
    This is the program I use to calculate the volume of the four-dimensional region, by counting the number of pixels inside the region.
    Han Liang
    """

import numpy as np
from scipy import weave
from scipy.weave import converters

L1 = 0.5 * (7 + 3 * np.sqrt(5))
L3 = 0.5 * (3 + np.sqrt(5))
volume = np.zeros([1])

code = """
    
    int vol = 0;
    int num = 0;
    float l1 = L1;
    float l3 = L3;
    float x, y, z, w;
    
    for(float i = 0; i <= 200; i++){
    x = -2 + i / 200 * 4;
    for(float j = 0; j <= 200; j++){
    y = -2 + j / 200 * 4;
    for(float k = 0; k <= 200; k++){
    z = -2 + k / 200 * 4;
    for(float m = 0; m <= 200; m++){
    w = -2 + m / 200 * 4;
    
    num = 0;
    
    if(
    (- l3 * x - l3 * y + z + w >= 2 - 2 * l3) &&
    (- l3 * x - l3 * y + z + w < 2) &&
    (x + y - l3 * z - l3 * w >= 2 - 2 * l3) &&
    (x + y - l3 * z - l3 * w < 2) &&
    (l1 * x - l1 * y - z + w >= 0) &&
    (l1 * x - l1 * y - z + w < l1 + 1) &&
    (- x + y + l1 * z - l1 * w >= 0) &&
    (- x + y + l1 * z - l1 * w < l1 + 1)
    ){num = 1;}
    
    if(
    (- l3 * (x+1) - l3 * y + z + w >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * y + z + w < 2) &&
    ((x+1) + y - l3 * z - l3 * w >= 2 - 2 * l3) &&
    ((x+1) + y - l3 * z - l3 * w < 2) &&
    (l1 * (x+1) - l1 * y - z + w >= 0) &&
    (l1 * (x+1) - l1 * y - z + w < l1 + 1) &&
    (- (x+1) + y + l1 * z - l1 * w >= 0) &&
    (- (x+1) + y + l1 * z - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * (y+1) + z + w >= 2 - 2 * l3) &&
    (- l3 * x - l3 * (y+1) + z + w < 2) &&
    (x + (y+1) - l3 * z - l3 * w >= 2 - 2 * l3) &&
    (x + (y+1) - l3 * z - l3 * w < 2) &&
    (l1 * x - l1 * (y+1) - z + w >= 0) &&
    (l1 * x - l1 * (y+1) - z + w < l1 + 1) &&
    (- x + (y+1) + l1 * z - l1 * w >= 0) &&
    (- x + (y+1) + l1 * z - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * y + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * x - l3 * y + (z+1) + w < 2) &&
    (x + y - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    (x + y - l3 * (z+1) - l3 * w < 2) &&
    (l1 * x - l1 * y - (z+1) + w >= 0) &&
    (l1 * x - l1 * y - (z+1) + w < l1 + 1) &&
    (- x + y + l1 * (z+1) - l1 * w >= 0) &&
    (- x + y + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * y + z + (w+1) >= 2 - 2 * l3) &&
    (- l3 * x - l3 * y + z + (w+1) < 2) &&
    (x + y - l3 * z - l3 * (w+1) >= 2 - 2 * l3) &&
    (x + y - l3 * z - l3 * (w+1) < 2) &&
    (l1 * x - l1 * y - z + (w+1) >= 0) &&
    (l1 * x - l1 * y - z + (w+1) < l1 + 1) &&
    (- x + y + l1 * z - l1 * (w+1) >= 0) &&
    (- x + y + l1 * z - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * y + z + (w+1) >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * y + z + (w+1) < 2) &&
    ((x+1) + y - l3 * z - l3 * (w+1) >= 2 - 2 * l3) &&
    ((x+1) + y - l3 * z - l3 * (w+1) < 2) &&
    (l1 * (x+1) - l1 * y - z + (w+1) >= 0) &&
    (l1 * (x+1) - l1 * y - z + (w+1) < l1 + 1) &&
    (- (x+1) + y + l1 * z - l1 * (w+1) >= 0) &&
    (- (x+1) + y + l1 * z - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * (y+1) + z + w >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * (y+1) + z + w < 2) &&
    ((x+1) + (y+1) - l3 * z - l3 * w >= 2 - 2 * l3) &&
    ((x+1) + (y+1) - l3 * z - l3 * w < 2) &&
    (l1 * (x+1) - l1 * (y+1) - z + w >= 0) &&
    (l1 * (x+1) - l1 * (y+1) - z + w < l1 + 1) &&
    (- (x+1) + (y+1) + l1 * z - l1 * w >= 0) &&
    (- (x+1) + (y+1) + l1 * z - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * y + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * y + (z+1) + w < 2) &&
    ((x+1) + y - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    ((x+1) + y - l3 * (z+1) - l3 * w < 2) &&
    (l1 * (x+1) - l1 * y - (z+1) + w >= 0) &&
    (l1 * (x+1) - l1 * y - (z+1) + w < l1 + 1) &&
    (- (x+1) + y + l1 * (z+1) - l1 * w >= 0) &&
    (- (x+1) + y + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * (y+1) + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * x - l3 * (y+1) + (z+1) + w < 2) &&
    (x + (y+1) - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    (x + (y+1) - l3 * (z+1) - l3 * w < 2) &&
    (l1 * x - l1 * (y+1) - (z+1) + w >= 0) &&
    (l1 * x - l1 * (y+1) - (z+1) + w < l1 + 1) &&
    (- x + (y+1) + l1 * (z+1) - l1 * w >= 0) &&
    (- x + (y+1) + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * (y+1) + z + (w+1) >= 2 - 2 * l3) &&
    (- l3 * x - l3 * (y+1) + z + (w+1) < 2) &&
    (x + (y+1) - l3 * z - l3 * (w+1) >= 2 - 2 * l3) &&
    (x + (y+1) - l3 * z - l3 * (w+1) < 2) &&
    (l1 * x - l1 * (y+1) - z + (w+1) >= 0) &&
    (l1 * x - l1 * (y+1) - z + (w+1) < l1 + 1) &&
    (- x + (y+1) + l1 * z - l1 * (w+1) >= 0) &&
    (- x + (y+1) + l1 * z - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * y + (z+1) + (w+1) >= 2 - 2 * l3) &&
    (- l3 * x - l3 * y + (z+1) + (w+1) < 2) &&
    (x + y - l3 * (z+1) - l3 * (w+1) >= 2 - 2 * l3) &&
    (x + y - l3 * (z+1) - l3 * (w+1) < 2) &&
    (l1 * x - l1 * y - (z+1) + (w+1) >= 0) &&
    (l1 * x - l1 * y - (z+1) + (w+1) < l1 + 1) &&
    (- x + y + l1 * (z+1) - l1 * (w+1) >= 0) &&
    (- x + y + l1 * (z+1) - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * x - l3 * (y+1) + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * x - l3 * (y+1) + (z+1) + w < 2) &&
    (x + (y+1) - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    (x + (y+1) - l3 * (z+1) - l3 * w < 2) &&
    (l1 * x - l1 * (y+1) - (z+1) + w >= 0) &&
    (l1 * x - l1 * (y+1) - (z+1) + w < l1 + 1) &&
    (- x + (y+1) + l1 * (z+1) - l1 * w >= 0) &&
    (- x + (y+1) + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * y + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * y + (z+1) + w < 2) &&
    ((x+1) + y - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    ((x+1) + y - l3 * (z+1) - l3 * w < 2) &&
    (l1 * (x+1) - l1 * y - (z+1) + w >= 0) &&
    (l1 * (x+1) - l1 * y - (z+1) + w < l1 + 1) &&
    (- (x+1) + y + l1 * (z+1) - l1 * w >= 0) &&
    (- (x+1) + y + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * (y+1) + z + (w+1) >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * (y+1) + z + (w+1) < 2) &&
    ((x+1) + (y+1) - l3 * z - l3 * (w+1) >= 2 - 2 * l3) &&
    ((x+1) + (y+1) - l3 * z - l3 * (w+1) < 2) &&
    (l1 * (x+1) - l1 * (y+1) - z + (w+1) >= 0) &&
    (l1 * (x+1) - l1 * (y+1) - z + (w+1) < l1 + 1) &&
    (- (x+1) + (y+1) + l1 * z - l1 * (w+1) >= 0) &&
    (- (x+1) + (y+1) + l1 * z - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * (y+1) + (z+1) + w >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * (y+1) + (z+1) + w < 2) &&
    ((x+1) + (y+1) - l3 * (z+1) - l3 * w >= 2 - 2 * l3) &&
    ((x+1) + (y+1) - l3 * (z+1) - l3 * w < 2) &&
    (l1 * (x+1) - l1 * (y+1) - (z+1) + w >= 0) &&
    (l1 * (x+1) - l1 * (y+1) - (z+1) + w < l1 + 1) &&
    (- (x+1) + (y+1) + l1 * (z+1) - l1 * w >= 0) &&
    (- (x+1) + (y+1) + l1 * (z+1) - l1 * w < l1 + 1)
    ){num = 0;}
    
    if(
    (- l3 * (x+1) - l3 * (y+1) + (z+1) + (w+1) >= 2 - 2 * l3) &&
    (- l3 * (x+1) - l3 * (y+1) + (z+1) + (w+1) < 2) &&
    ((x+1) + (y+1) - l3 * (z+1) - l3 * (w+1) >= 2 - 2 * l3) &&
    ((x+1) + (y+1) - l3 * (z+1) - l3 * (w+1) < 2) &&
    (l1 * (x+1) - l1 * (y+1) - (z+1) + (w+1) >= 0) &&
    (l1 * (x+1) - l1 * (y+1) - (z+1) + (w+1) < l1 + 1) &&
    (- (x+1) + (y+1) + l1 * (z+1) - l1 * (w+1) >= 0) &&
    (- (x+1) + (y+1) + l1 * (z+1) - l1 * (w+1) < l1 + 1)
    ){num = 0;}
    
    vol = vol + num;
}
}
}
}
volume(0) = vol;
    """

weave.inline(code, ['L1','L3','volume'], type_converters=converters.blitz, compiler='gcc')

print volume[0]/(200./4)**4
print "finished"
